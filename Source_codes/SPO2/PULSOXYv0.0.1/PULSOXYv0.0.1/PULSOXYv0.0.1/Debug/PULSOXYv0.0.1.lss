
PULSOXYv0.0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000870  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800100  00800100  000008e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b78  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088f  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000749  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000502  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a7  00000000  00000000  00002c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002ed9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <main>
  9e:	0c 94 36 04 	jmp	0x86c	; 0x86c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:
#include <stdint.h>



void init_ADC()
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	PRR &= ~(1 << PRADC);					//Switch off power reduction mode of the ADC (required for enabling the ADC)
  ae:	84 e6       	ldi	r24, 0x64	; 100
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	24 e6       	ldi	r18, 0x64	; 100
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	20 81       	ld	r18, Z
  ba:	2e 7f       	andi	r18, 0xFE	; 254
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
	ADCSRA  = 0x00;							//Set all bits in register ADCSRA to 0
  c0:	8a e7       	ldi	r24, 0x7A	; 122
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	fc 01       	movw	r30, r24
  c6:	10 82       	st	Z, r1
	ADCSRB  = 0x00;							//Set all bits in register ADCSRB to 0
  c8:	8b e7       	ldi	r24, 0x7B	; 123
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	10 82       	st	Z, r1
	ADMUX	= 0x00;							//Set all bits in register ADMUX to 0
  d0:	8c e7       	ldi	r24, 0x7C	; 124
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	10 82       	st	Z, r1
	ADMUX  |= (1 << REFS0);					//Set AVcc as voltage Reference
  d8:	8c e7       	ldi	r24, 0x7C	; 124
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	2c e7       	ldi	r18, 0x7C	; 124
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	20 81       	ld	r18, Z
  e4:	20 64       	ori	r18, 0x40	; 64
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
	ADMUX  |= (1 << ADLAR);					//Set ADC Left Adjust Result
  ea:	8c e7       	ldi	r24, 0x7C	; 124
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2c e7       	ldi	r18, 0x7C	; 124
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	20 62       	ori	r18, 0x20	; 32
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1);	//Set ADC prescaler to 64
  fc:	8a e7       	ldi	r24, 0x7A	; 122
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	2a e7       	ldi	r18, 0x7A	; 122
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	20 81       	ld	r18, Z
 108:	26 60       	ori	r18, 0x06	; 6
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN);					//Enable ADC
 10e:	8a e7       	ldi	r24, 0x7A	; 122
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	2a e7       	ldi	r18, 0x7A	; 122
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	f9 01       	movw	r30, r18
 118:	20 81       	ld	r18, Z
 11a:	20 68       	ori	r18, 0x80	; 128
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
}
 120:	00 00       	nop
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <ADCread>:

uint16_t ADCread(uint8_t adcpin)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	00 d0       	rcall	.+0      	; 0x12e <ADCread+0x6>
 12e:	1f 92       	push	r1
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t ADCLval = 0;			//variable to read the ADCL bits
 136:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t ADCHval = 0;			//variable to read the ADCH bits
 138:	1a 82       	std	Y+2, r1	; 0x02
	ADMUX  &= (0xF0);						//Set the Input Channel Selection bits to 0
 13a:	8c e7       	ldi	r24, 0x7C	; 124
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	2c e7       	ldi	r18, 0x7C	; 124
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	f9 01       	movw	r30, r18
 144:	20 81       	ld	r18, Z
 146:	20 7f       	andi	r18, 0xF0	; 240
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
	ADMUX  |= (adcpin & 0x0F);				//Select the ADC Input Channel
 14c:	8c e7       	ldi	r24, 0x7C	; 124
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	2c e7       	ldi	r18, 0x7C	; 124
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	20 81       	ld	r18, Z
 158:	32 2f       	mov	r19, r18
 15a:	2b 81       	ldd	r18, Y+3	; 0x03
 15c:	2f 70       	andi	r18, 0x0F	; 15
 15e:	23 2b       	or	r18, r19
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC);					//Start ADC Conversion
 164:	8a e7       	ldi	r24, 0x7A	; 122
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	2a e7       	ldi	r18, 0x7A	; 122
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	20 64       	ori	r18, 0x40	; 64
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
	while(!(ADCSRA & (1 << ADIF)));			//Wait until the ADC Conversion is Complete
 176:	00 00       	nop
 178:	8a e7       	ldi	r24, 0x7A	; 122
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	88 2f       	mov	r24, r24
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	80 71       	andi	r24, 0x10	; 16
 186:	99 27       	eor	r25, r25
 188:	89 2b       	or	r24, r25
 18a:	b1 f3       	breq	.-20     	; 0x178 <ADCread+0x50>
	ADCLval = ADCL;							//Read the ADCL register
 18c:	88 e7       	ldi	r24, 0x78	; 120
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	fc 01       	movw	r30, r24
 192:	80 81       	ld	r24, Z
 194:	89 83       	std	Y+1, r24	; 0x01
	ADCHval = ADCH;							//Read the ADCH register
 196:	89 e7       	ldi	r24, 0x79	; 121
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	80 81       	ld	r24, Z
 19e:	8a 83       	std	Y+2, r24	; 0x02
	return (ADCHval<<2)|(ADCLval>>6);		//Return the 10bit ADC value
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	9c 01       	movw	r18, r24
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	82 95       	swap	r24
 1b4:	86 95       	lsr	r24
 1b6:	86 95       	lsr	r24
 1b8:	83 70       	andi	r24, 0x03	; 3
 1ba:	88 2f       	mov	r24, r24
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	82 2b       	or	r24, r18
 1c0:	93 2b       	or	r25, r19
	ADCSRA |= (1 << ADIF);					//Clear ADC Interrupt Flag
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <init_TC1_PWM_15kHz>:
 */ 

#include <avr/io.h>

void init_TC1_PWM_15kHz()
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
	PRR &= ~(1 << PRTIM1);				//Disable power reduction mode on TC1
 1d6:	84 e6       	ldi	r24, 0x64	; 100
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	24 e6       	ldi	r18, 0x64	; 100
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	f9 01       	movw	r30, r18
 1e0:	20 81       	ld	r18, Z
 1e2:	27 7f       	andi	r18, 0xF7	; 247
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
	DDRB |= (1 << PB2);					//PIN PB2 Output
 1e8:	84 e2       	ldi	r24, 0x24	; 36
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	24 e2       	ldi	r18, 0x24	; 36
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	f9 01       	movw	r30, r18
 1f2:	20 81       	ld	r18, Z
 1f4:	24 60       	ori	r18, 0x04	; 4
 1f6:	fc 01       	movw	r30, r24
 1f8:	20 83       	st	Z, r18
	TCCR1A = 0x00;						//Set all bits in register TCCR1A to 0
 1fa:	80 e8       	ldi	r24, 0x80	; 128
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	fc 01       	movw	r30, r24
 200:	10 82       	st	Z, r1
	TCCR1B = 0x00;						//Set all bits in register TCCR1B to 0
 202:	81 e8       	ldi	r24, 0x81	; 129
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	10 82       	st	Z, r1
	TCCR1C = 0x00;						//Set all bits in register TCCR1C to 0
 20a:	82 e8       	ldi	r24, 0x82	; 130
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fc 01       	movw	r30, r24
 210:	10 82       	st	Z, r1
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);	//Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at BOTTOM (non-inverting mode)
 212:	80 e8       	ldi	r24, 0x80	; 128
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	20 e8       	ldi	r18, 0x80	; 128
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	20 81       	ld	r18, Z
 21e:	20 6a       	ori	r18, 0xA0	; 160
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
	TCCR1A |= (1<<WGM10)|(1<<WGM11);	//Set TC1 Mode to 10-Bit Fast PWM
 224:	80 e8       	ldi	r24, 0x80	; 128
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	20 e8       	ldi	r18, 0x80	; 128
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	f9 01       	movw	r30, r18
 22e:	20 81       	ld	r18, Z
 230:	23 60       	ori	r18, 0x03	; 3
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
	TCCR1B |= (1<<WGM12);				//Set TC1 Mode to 10-Bit Fast PWM
 236:	81 e8       	ldi	r24, 0x81	; 129
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	21 e8       	ldi	r18, 0x81	; 129
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	f9 01       	movw	r30, r18
 240:	20 81       	ld	r18, Z
 242:	28 60       	ori	r18, 0x08	; 8
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
	TCCR1B |= (1<<CS10);				//Set Clock Select Bit to Prescaler 1
 248:	81 e8       	ldi	r24, 0x81	; 129
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	21 e8       	ldi	r18, 0x81	; 129
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	f9 01       	movw	r30, r18
 252:	20 81       	ld	r18, Z
 254:	21 60       	ori	r18, 0x01	; 1
 256:	fc 01       	movw	r30, r24
 258:	20 83       	st	Z, r18
	OCR1B = 512;						//Set PWM-Duty-Cycle to 100%
 25a:	8a e8       	ldi	r24, 0x8A	; 138
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	32 e0       	ldi	r19, 0x02	; 2
 262:	fc 01       	movw	r30, r24
 264:	31 83       	std	Z+1, r19	; 0x01
 266:	20 83       	st	Z, r18
	
 268:	00 00       	nop
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <init_TC2_8b_2ms>:
 */ 

#include <avr/io.h>

void init_TC2_8b_2ms()
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
	PRR &= ~(1 << PRTIM2);				//Disable power reduction mode on TC2
 278:	84 e6       	ldi	r24, 0x64	; 100
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	24 e6       	ldi	r18, 0x64	; 100
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	f9 01       	movw	r30, r18
 282:	20 81       	ld	r18, Z
 284:	2f 7b       	andi	r18, 0xBF	; 191
 286:	fc 01       	movw	r30, r24
 288:	20 83       	st	Z, r18
	TCCR2A = 0x00;						//Set all bits in register TCCR2A to 0
 28a:	80 eb       	ldi	r24, 0xB0	; 176
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	10 82       	st	Z, r1
	TCCR2B = 0x00;						//Set all bits in register TCCR2B to 0
 292:	81 eb       	ldi	r24, 0xB1	; 177
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	fc 01       	movw	r30, r24
 298:	10 82       	st	Z, r1
	TCNT2  = 0x00;						//Set all bits in register TCNT2 to 0
 29a:	82 eb       	ldi	r24, 0xB2	; 178
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	fc 01       	movw	r30, r24
 2a0:	10 82       	st	Z, r1
	TCCR2A |=  (1<<WGM21);				//Set bits for Timer on Compare Match (CTC) OCR2A
 2a2:	80 eb       	ldi	r24, 0xB0	; 176
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	20 eb       	ldi	r18, 0xB0	; 176
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	f9 01       	movw	r30, r18
 2ac:	20 81       	ld	r18, Z
 2ae:	22 60       	ori	r18, 0x02	; 2
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
	TCCR2B |=  (1<<CS22)|(1<<CS20);		//Set Clock Select bits Prescaler 128
 2b4:	81 eb       	ldi	r24, 0xB1	; 177
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	21 eb       	ldi	r18, 0xB1	; 177
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	f9 01       	movw	r30, r18
 2be:	20 81       	ld	r18, Z
 2c0:	25 60       	ori	r18, 0x05	; 5
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
	OCR2A   =   250-1;					//250 Timer Ticks to CTC
 2c6:	83 eb       	ldi	r24, 0xB3	; 179
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	29 ef       	ldi	r18, 0xF9	; 249
 2cc:	fc 01       	movw	r30, r24
 2ce:	20 83       	st	Z, r18
	TIMSK2 |=  (1<<OCIE2A);				//Output Compare A Match Interrupt Enable
 2d0:	80 e7       	ldi	r24, 0x70	; 112
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	20 e7       	ldi	r18, 0x70	; 112
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	f9 01       	movw	r30, r18
 2da:	20 81       	ld	r18, Z
 2dc:	22 60       	ori	r18, 0x02	; 2
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
 2e2:	00 00       	nop
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <init_UART_9600_8N1>:
#include <stdint.h>
#include <string.h>
#include <avr/interrupt.h>

void init_UART_9600_8N1()
{
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
	UCSR0A |= (1 << U2X0);							// Set the "Double Transmission Speed" bit in order to use a more precise timing mode for 9600 Baud
 2f2:	80 ec       	ldi	r24, 0xC0	; 192
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	20 ec       	ldi	r18, 0xC0	; 192
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	f9 01       	movw	r30, r18
 2fc:	20 81       	ld	r18, Z
 2fe:	22 60       	ori	r18, 0x02	; 2
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
	UCSR0B = ((1 << RXEN0) | (1 << TXEN0));		// Enable receive and transmit mode which again configure the respective pins accordingly
 304:	81 ec       	ldi	r24, 0xC1	; 193
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	28 e1       	ldi	r18, 0x18	; 24
 30a:	fc 01       	movw	r30, r24
 30c:	20 83       	st	Z, r18
	UCSR0C = ((1 << UCSZ01) | (1 << UCSZ00));		// Set 8-bit data mode
 30e:	82 ec       	ldi	r24, 0xC2	; 194
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	26 e0       	ldi	r18, 0x06	; 6
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
	UBRR0L = 207;									// Set BAUD rate to 9600;
 318:	84 ec       	ldi	r24, 0xC4	; 196
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	2f ec       	ldi	r18, 0xCF	; 207
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18
}
 322:	00 00       	nop
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <SendData>:

void SendData(int32_t data)
{
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	62 97       	sbiw	r28, 0x12	; 18
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
 342:	6f 87       	std	Y+15, r22	; 0x0f
 344:	78 8b       	std	Y+16, r23	; 0x10
 346:	89 8b       	std	Y+17, r24	; 0x11
 348:	9a 8b       	std	Y+18, r25	; 0x12
	char data_string[11];
	char *data_string_p = &data_string[0];
 34a:	ce 01       	movw	r24, r28
 34c:	04 96       	adiw	r24, 0x04	; 4
 34e:	9b 83       	std	Y+3, r25	; 0x03
 350:	8a 83       	std	Y+2, r24	; 0x02
	itoa(data, data_string_p, 10);
 352:	8f 85       	ldd	r24, Y+15	; 0x0f
 354:	98 89       	ldd	r25, Y+16	; 0x10
 356:	2a 81       	ldd	r18, Y+2	; 0x02
 358:	3b 81       	ldd	r19, Y+3	; 0x03
 35a:	4a e0       	ldi	r20, 0x0A	; 10
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	b9 01       	movw	r22, r18
 360:	0e 94 f6 03 	call	0x7ec	; 0x7ec <itoa>
	for (uint8_t i=0; i < strlen(data_string); i++)
 364:	19 82       	std	Y+1, r1	; 0x01
 366:	1b c0       	rjmp	.+54     	; 0x39e <SendData+0x74>
		{
			while ((UCSR0A & (1 << UDRE0)) == 0);
 368:	00 00       	nop
 36a:	80 ec       	ldi	r24, 0xC0	; 192
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	fc 01       	movw	r30, r24
 370:	80 81       	ld	r24, Z
 372:	88 2f       	mov	r24, r24
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	80 72       	andi	r24, 0x20	; 32
 378:	99 27       	eor	r25, r25
 37a:	89 2b       	or	r24, r25
 37c:	b1 f3       	breq	.-20     	; 0x36a <SendData+0x40>
			UDR0 = *(data_string_p+i);
 37e:	86 ec       	ldi	r24, 0xC6	; 198
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	29 81       	ldd	r18, Y+1	; 0x01
 384:	22 2f       	mov	r18, r18
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	4a 81       	ldd	r20, Y+2	; 0x02
 38a:	5b 81       	ldd	r21, Y+3	; 0x03
 38c:	24 0f       	add	r18, r20
 38e:	35 1f       	adc	r19, r21
 390:	f9 01       	movw	r30, r18
 392:	20 81       	ld	r18, Z
 394:	fc 01       	movw	r30, r24
 396:	20 83       	st	Z, r18
void SendData(int32_t data)
{
	char data_string[11];
	char *data_string_p = &data_string[0];
	itoa(data, data_string_p, 10);
	for (uint8_t i=0; i < strlen(data_string); i++)
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	89 83       	std	Y+1, r24	; 0x01
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	08 2f       	mov	r16, r24
 3a2:	10 e0       	ldi	r17, 0x00	; 0
 3a4:	ce 01       	movw	r24, r28
 3a6:	04 96       	adiw	r24, 0x04	; 4
 3a8:	0e 94 ed 03 	call	0x7da	; 0x7da <strlen>
 3ac:	08 17       	cp	r16, r24
 3ae:	19 07       	cpc	r17, r25
 3b0:	d8 f2       	brcs	.-74     	; 0x368 <SendData+0x3e>
		{
			while ((UCSR0A & (1 << UDRE0)) == 0);
			UDR0 = *(data_string_p+i);
		}
		while ((UCSR0A & (1 << UDRE0)) == 0);
 3b2:	00 00       	nop
 3b4:	80 ec       	ldi	r24, 0xC0	; 192
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	fc 01       	movw	r30, r24
 3ba:	80 81       	ld	r24, Z
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	80 72       	andi	r24, 0x20	; 32
 3c2:	99 27       	eor	r25, r25
 3c4:	89 2b       	or	r24, r25
 3c6:	b1 f3       	breq	.-20     	; 0x3b4 <SendData+0x8a>
		UDR0 = 0x0A;
 3c8:	86 ec       	ldi	r24, 0xC6	; 198
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	2a e0       	ldi	r18, 0x0A	; 10
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
}
 3d2:	00 00       	nop
 3d4:	62 96       	adiw	r28, 0x12	; 18
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	08 95       	ret

000003ea <main>:
volatile uint8_t WriteBuffer = 0;

uint64_t j = 0;

int main(void)
{
 3ea:	af 92       	push	r10
 3ec:	bf 92       	push	r11
 3ee:	cf 92       	push	r12
 3f0:	df 92       	push	r13
 3f2:	ef 92       	push	r14
 3f4:	ff 92       	push	r15
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
	cli();
 402:	f8 94       	cli
	
    init_ADC();
 404:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	init_TC2_8b_2ms();
 408:	0e 94 38 01 	call	0x270	; 0x270 <init_TC2_8b_2ms>
	init_TC1_PWM_15kHz();
 40c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <init_TC1_PWM_15kHz>
	init_UART_9600_8N1();
 410:	0e 94 75 01 	call	0x2ea	; 0x2ea <init_UART_9600_8N1>
	
	sei();
 414:	78 94       	sei
	
    while (1) 
    {
		UpdateSignals();
 416:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UpdateSignals>
		SendData(PPGIRsig);
 41a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PPGIRsig>
 41e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <PPGIRsig+0x1>
 422:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <PPGIRsig+0x2>
 426:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <PPGIRsig+0x3>
 42a:	0e 94 95 01 	call	0x32a	; 0x32a <SendData>
		j=0;
 42e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 432:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 436:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end+0x2>
 43a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x3>
 43e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end+0x4>
 442:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x5>
 446:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end+0x6>
 44a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x7>
		while (j<600000000)
 44e:	33 c0       	rjmp	.+102    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
		{
			j++;
 450:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <__data_end>
 454:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <__data_end+0x1>
 458:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <__data_end+0x2>
 45c:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <__data_end+0x3>
 460:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <__data_end+0x4>
 464:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <__data_end+0x5>
 468:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <__data_end+0x6>
 46c:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <__data_end+0x7>
 470:	2a 2d       	mov	r18, r10
 472:	3b 2d       	mov	r19, r11
 474:	4c 2d       	mov	r20, r12
 476:	5d 2d       	mov	r21, r13
 478:	6e 2d       	mov	r22, r14
 47a:	7f 2d       	mov	r23, r15
 47c:	80 2f       	mov	r24, r16
 47e:	91 2f       	mov	r25, r17
 480:	a1 e0       	ldi	r26, 0x01	; 1
 482:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__adddi3_s8>
 486:	a2 2e       	mov	r10, r18
 488:	b3 2e       	mov	r11, r19
 48a:	c4 2e       	mov	r12, r20
 48c:	d5 2e       	mov	r13, r21
 48e:	e6 2e       	mov	r14, r22
 490:	f7 2e       	mov	r15, r23
 492:	08 2f       	mov	r16, r24
 494:	19 2f       	mov	r17, r25
 496:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_end>
 49a:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_end+0x1>
 49e:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <__data_end+0x2>
 4a2:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <__data_end+0x3>
 4a6:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <__data_end+0x4>
 4aa:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <__data_end+0x5>
 4ae:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <__data_end+0x6>
 4b2:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <__data_end+0x7>
    while (1) 
    {
		UpdateSignals();
		SendData(PPGIRsig);
		j=0;
		while (j<600000000)
 4b6:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <__data_end>
 4ba:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <__data_end+0x1>
 4be:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <__data_end+0x2>
 4c2:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <__data_end+0x3>
 4c6:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <__data_end+0x4>
 4ca:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <__data_end+0x5>
 4ce:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <__data_end+0x6>
 4d2:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <__data_end+0x7>
 4d6:	2a 2d       	mov	r18, r10
 4d8:	3b 2d       	mov	r19, r11
 4da:	4c 2d       	mov	r20, r12
 4dc:	5d 2d       	mov	r21, r13
 4de:	6e 2d       	mov	r22, r14
 4e0:	7f 2d       	mov	r23, r15
 4e2:	80 2f       	mov	r24, r16
 4e4:	91 2f       	mov	r25, r17
 4e6:	2f 3f       	cpi	r18, 0xFF	; 255
 4e8:	35 44       	sbci	r19, 0x45	; 69
 4ea:	43 4c       	sbci	r20, 0xC3	; 195
 4ec:	53 42       	sbci	r21, 0x23	; 35
 4ee:	61 05       	cpc	r22, r1
 4f0:	71 05       	cpc	r23, r1
 4f2:	81 05       	cpc	r24, r1
 4f4:	91 05       	cpc	r25, r1
 4f6:	09 f0       	breq	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f8:	08 f4       	brcc	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4fa:	aa cf       	rjmp	.-172    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		{
			j++;
		}
		
    }
 4fc:	8c cf       	rjmp	.-232    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

000004fe <UpdateSignals>:
volatile int32_t PPGRDCsig = 0;
volatile int32_t PPGIRACDCsig = 0;
volatile int32_t PPGRACDCsig = 0;

void UpdateSignals()
{
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
	IRAC = ADCread(PPGIR);											//ADC of the AC-IR Signal
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	0e 94 94 00 	call	0x128	; 0x128 <ADCread>
 514:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <IRAC+0x1>
 518:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <IRAC>
	RAC = ADCread(PPGR);											//ADC of the AC-R Signal
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	0e 94 94 00 	call	0x128	; 0x128 <ADCread>
 522:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <RAC+0x1>
 526:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <RAC>
	IRDC = ADCread(PPGIRDC);										//ADC of the DC-IR Signal
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	0e 94 94 00 	call	0x128	; 0x128 <ADCread>
 530:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <IRDC+0x1>
 534:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <IRDC>
	RDC = ADCread(PPGRDC);											//ADC of the DC-R Signal
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 94 00 	call	0x128	; 0x128 <ADCread>
 53e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <RDC+0x1>
 542:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <RDC>
	PPGIRsig = (((115*PPGIRsig)>>7)+((13*(IRAC-512))>>7));			//4 Hz low-pass filtering and removing the 2.5 V offset from the amplified AC-IR Signal
 546:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <PPGIRsig>
 54a:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <PPGIRsig+0x1>
 54e:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <PPGIRsig+0x2>
 552:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <PPGIRsig+0x3>
 556:	83 e7       	ldi	r24, 0x73	; 115
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	dc 01       	movw	r26, r24
 55c:	0e 94 c7 03 	call	0x78e	; 0x78e <__muluhisi3>
 560:	dc 01       	movw	r26, r24
 562:	cb 01       	movw	r24, r22
 564:	9c 01       	movw	r18, r24
 566:	ad 01       	movw	r20, r26
 568:	68 94       	set
 56a:	16 f8       	bld	r1, 6
 56c:	55 95       	asr	r21
 56e:	47 95       	ror	r20
 570:	37 95       	ror	r19
 572:	27 95       	ror	r18
 574:	16 94       	lsr	r1
 576:	d1 f7       	brne	.-12     	; 0x56c <UpdateSignals+0x6e>
 578:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <IRAC>
 57c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <IRAC+0x1>
 580:	bc 01       	movw	r22, r24
 582:	72 50       	subi	r23, 0x02	; 2
 584:	ed e0       	ldi	r30, 0x0D	; 13
 586:	e6 9f       	mul	r30, r22
 588:	c0 01       	movw	r24, r0
 58a:	e7 9f       	mul	r30, r23
 58c:	90 0d       	add	r25, r0
 58e:	11 24       	eor	r1, r1
 590:	88 0f       	add	r24, r24
 592:	89 2f       	mov	r24, r25
 594:	88 1f       	adc	r24, r24
 596:	99 0b       	sbc	r25, r25
 598:	09 2e       	mov	r0, r25
 59a:	00 0c       	add	r0, r0
 59c:	aa 0b       	sbc	r26, r26
 59e:	bb 0b       	sbc	r27, r27
 5a0:	82 0f       	add	r24, r18
 5a2:	93 1f       	adc	r25, r19
 5a4:	a4 1f       	adc	r26, r20
 5a6:	b5 1f       	adc	r27, r21
 5a8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <PPGIRsig>
 5ac:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <PPGIRsig+0x1>
 5b0:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <PPGIRsig+0x2>
 5b4:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <PPGIRsig+0x3>
	PPGRsig = (((115*PPGRsig)>>7)+((13*(RAC-512))>>7));				//4 Hz low-pass filtering and removing the 2.5 V offset from the amplified AC-R Signal
 5b8:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <PPGRsig>
 5bc:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <PPGRsig+0x1>
 5c0:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <PPGRsig+0x2>
 5c4:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <PPGRsig+0x3>
 5c8:	83 e7       	ldi	r24, 0x73	; 115
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	dc 01       	movw	r26, r24
 5ce:	0e 94 c7 03 	call	0x78e	; 0x78e <__muluhisi3>
 5d2:	dc 01       	movw	r26, r24
 5d4:	cb 01       	movw	r24, r22
 5d6:	9c 01       	movw	r18, r24
 5d8:	ad 01       	movw	r20, r26
 5da:	68 94       	set
 5dc:	16 f8       	bld	r1, 6
 5de:	55 95       	asr	r21
 5e0:	47 95       	ror	r20
 5e2:	37 95       	ror	r19
 5e4:	27 95       	ror	r18
 5e6:	16 94       	lsr	r1
 5e8:	d1 f7       	brne	.-12     	; 0x5de <UpdateSignals+0xe0>
 5ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <RAC>
 5ee:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <RAC+0x1>
 5f2:	bc 01       	movw	r22, r24
 5f4:	72 50       	subi	r23, 0x02	; 2
 5f6:	ed e0       	ldi	r30, 0x0D	; 13
 5f8:	e6 9f       	mul	r30, r22
 5fa:	c0 01       	movw	r24, r0
 5fc:	e7 9f       	mul	r30, r23
 5fe:	90 0d       	add	r25, r0
 600:	11 24       	eor	r1, r1
 602:	88 0f       	add	r24, r24
 604:	89 2f       	mov	r24, r25
 606:	88 1f       	adc	r24, r24
 608:	99 0b       	sbc	r25, r25
 60a:	09 2e       	mov	r0, r25
 60c:	00 0c       	add	r0, r0
 60e:	aa 0b       	sbc	r26, r26
 610:	bb 0b       	sbc	r27, r27
 612:	82 0f       	add	r24, r18
 614:	93 1f       	adc	r25, r19
 616:	a4 1f       	adc	r26, r20
 618:	b5 1f       	adc	r27, r21
 61a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <PPGRsig>
 61e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <PPGRsig+0x1>
 622:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <PPGRsig+0x2>
 626:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <PPGRsig+0x3>
	PPGIRDCsig = (((124*PPGIRDCsig)>>7)+((4*IRDC)>>7));				//0.4 Hz low-pass filtering  the DC-IR Signal
 62a:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <PPGIRDCsig>
 62e:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <PPGIRDCsig+0x1>
 632:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <PPGIRDCsig+0x2>
 636:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <PPGIRDCsig+0x3>
 63a:	8c e7       	ldi	r24, 0x7C	; 124
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	dc 01       	movw	r26, r24
 640:	0e 94 c7 03 	call	0x78e	; 0x78e <__muluhisi3>
 644:	dc 01       	movw	r26, r24
 646:	cb 01       	movw	r24, r22
 648:	9c 01       	movw	r18, r24
 64a:	ad 01       	movw	r20, r26
 64c:	68 94       	set
 64e:	16 f8       	bld	r1, 6
 650:	55 95       	asr	r21
 652:	47 95       	ror	r20
 654:	37 95       	ror	r19
 656:	27 95       	ror	r18
 658:	16 94       	lsr	r1
 65a:	d1 f7       	brne	.-12     	; 0x650 <UpdateSignals+0x152>
 65c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <IRDC>
 660:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <IRDC+0x1>
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	88 0f       	add	r24, r24
 66e:	89 2f       	mov	r24, r25
 670:	88 1f       	adc	r24, r24
 672:	99 0b       	sbc	r25, r25
 674:	09 2e       	mov	r0, r25
 676:	00 0c       	add	r0, r0
 678:	aa 0b       	sbc	r26, r26
 67a:	bb 0b       	sbc	r27, r27
 67c:	82 0f       	add	r24, r18
 67e:	93 1f       	adc	r25, r19
 680:	a4 1f       	adc	r26, r20
 682:	b5 1f       	adc	r27, r21
 684:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <PPGIRDCsig>
 688:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <PPGIRDCsig+0x1>
 68c:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <PPGIRDCsig+0x2>
 690:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <PPGIRDCsig+0x3>
	PPGRDCsig = (((124*PPGRDCsig)>>7)+((4*RDC)>>7));				//0.4 Hz low-pass filtering  the DC-R Signal
 694:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <PPGRDCsig>
 698:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <PPGRDCsig+0x1>
 69c:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <PPGRDCsig+0x2>
 6a0:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <PPGRDCsig+0x3>
 6a4:	8c e7       	ldi	r24, 0x7C	; 124
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	dc 01       	movw	r26, r24
 6aa:	0e 94 c7 03 	call	0x78e	; 0x78e <__muluhisi3>
 6ae:	dc 01       	movw	r26, r24
 6b0:	cb 01       	movw	r24, r22
 6b2:	9c 01       	movw	r18, r24
 6b4:	ad 01       	movw	r20, r26
 6b6:	68 94       	set
 6b8:	16 f8       	bld	r1, 6
 6ba:	55 95       	asr	r21
 6bc:	47 95       	ror	r20
 6be:	37 95       	ror	r19
 6c0:	27 95       	ror	r18
 6c2:	16 94       	lsr	r1
 6c4:	d1 f7       	brne	.-12     	; 0x6ba <UpdateSignals+0x1bc>
 6c6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <RDC>
 6ca:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <RDC+0x1>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	88 0f       	add	r24, r24
 6d8:	89 2f       	mov	r24, r25
 6da:	88 1f       	adc	r24, r24
 6dc:	99 0b       	sbc	r25, r25
 6de:	09 2e       	mov	r0, r25
 6e0:	00 0c       	add	r0, r0
 6e2:	aa 0b       	sbc	r26, r26
 6e4:	bb 0b       	sbc	r27, r27
 6e6:	82 0f       	add	r24, r18
 6e8:	93 1f       	adc	r25, r19
 6ea:	a4 1f       	adc	r26, r20
 6ec:	b5 1f       	adc	r27, r21
 6ee:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <PPGRDCsig>
 6f2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <PPGRDCsig+0x1>
 6f6:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <PPGRDCsig+0x2>
 6fa:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <PPGRDCsig+0x3>
	PPGIRACDCsig = (IRDC-PPGIRDCsig);								//0.4 Hz high-pass filtered AC-IR Signal on top of the DC-IR Signal without amplification
 6fe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <IRDC>
 702:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <IRDC+0x1>
 706:	9c 01       	movw	r18, r24
 708:	99 0f       	add	r25, r25
 70a:	44 0b       	sbc	r20, r20
 70c:	55 0b       	sbc	r21, r21
 70e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <PPGIRDCsig>
 712:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <PPGIRDCsig+0x1>
 716:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <PPGIRDCsig+0x2>
 71a:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <PPGIRDCsig+0x3>
 71e:	79 01       	movw	r14, r18
 720:	8a 01       	movw	r16, r20
 722:	e8 1a       	sub	r14, r24
 724:	f9 0a       	sbc	r15, r25
 726:	0a 0b       	sbc	r16, r26
 728:	1b 0b       	sbc	r17, r27
 72a:	d8 01       	movw	r26, r16
 72c:	c7 01       	movw	r24, r14
 72e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <PPGIRACDCsig>
 732:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <PPGIRACDCsig+0x1>
 736:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <PPGIRACDCsig+0x2>
 73a:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <PPGIRACDCsig+0x3>
	PPGRACDCsig = (RDC-PPGRDCsig); 									//0.4 Hz high-pass filtered AC-R Signal on top of the DC-R Signal without amplification
 73e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <RDC>
 742:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <RDC+0x1>
 746:	9c 01       	movw	r18, r24
 748:	99 0f       	add	r25, r25
 74a:	44 0b       	sbc	r20, r20
 74c:	55 0b       	sbc	r21, r21
 74e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <PPGRDCsig>
 752:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <PPGRDCsig+0x1>
 756:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <PPGRDCsig+0x2>
 75a:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <PPGRDCsig+0x3>
 75e:	79 01       	movw	r14, r18
 760:	8a 01       	movw	r16, r20
 762:	e8 1a       	sub	r14, r24
 764:	f9 0a       	sbc	r15, r25
 766:	0a 0b       	sbc	r16, r26
 768:	1b 0b       	sbc	r17, r27
 76a:	d8 01       	movw	r26, r16
 76c:	c7 01       	movw	r24, r14
 76e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <PPGRACDCsig>
 772:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <PPGRACDCsig+0x1>
 776:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <PPGRACDCsig+0x2>
 77a:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <PPGRACDCsig+0x3>
 77e:	00 00       	nop
 780:	df 91       	pop	r29
 782:	cf 91       	pop	r28
 784:	1f 91       	pop	r17
 786:	0f 91       	pop	r16
 788:	ff 90       	pop	r15
 78a:	ef 90       	pop	r14
 78c:	08 95       	ret

0000078e <__muluhisi3>:
 78e:	0e 94 de 03 	call	0x7bc	; 0x7bc <__umulhisi3>
 792:	a5 9f       	mul	r26, r21
 794:	90 0d       	add	r25, r0
 796:	b4 9f       	mul	r27, r20
 798:	90 0d       	add	r25, r0
 79a:	a4 9f       	mul	r26, r20
 79c:	80 0d       	add	r24, r0
 79e:	91 1d       	adc	r25, r1
 7a0:	11 24       	eor	r1, r1
 7a2:	08 95       	ret

000007a4 <__adddi3_s8>:
 7a4:	00 24       	eor	r0, r0
 7a6:	a7 fd       	sbrc	r26, 7
 7a8:	00 94       	com	r0
 7aa:	2a 0f       	add	r18, r26
 7ac:	30 1d       	adc	r19, r0
 7ae:	40 1d       	adc	r20, r0
 7b0:	50 1d       	adc	r21, r0
 7b2:	60 1d       	adc	r22, r0
 7b4:	70 1d       	adc	r23, r0
 7b6:	80 1d       	adc	r24, r0
 7b8:	90 1d       	adc	r25, r0
 7ba:	08 95       	ret

000007bc <__umulhisi3>:
 7bc:	a2 9f       	mul	r26, r18
 7be:	b0 01       	movw	r22, r0
 7c0:	b3 9f       	mul	r27, r19
 7c2:	c0 01       	movw	r24, r0
 7c4:	a3 9f       	mul	r26, r19
 7c6:	70 0d       	add	r23, r0
 7c8:	81 1d       	adc	r24, r1
 7ca:	11 24       	eor	r1, r1
 7cc:	91 1d       	adc	r25, r1
 7ce:	b2 9f       	mul	r27, r18
 7d0:	70 0d       	add	r23, r0
 7d2:	81 1d       	adc	r24, r1
 7d4:	11 24       	eor	r1, r1
 7d6:	91 1d       	adc	r25, r1
 7d8:	08 95       	ret

000007da <strlen>:
 7da:	fc 01       	movw	r30, r24
 7dc:	01 90       	ld	r0, Z+
 7de:	00 20       	and	r0, r0
 7e0:	e9 f7       	brne	.-6      	; 0x7dc <strlen+0x2>
 7e2:	80 95       	com	r24
 7e4:	90 95       	com	r25
 7e6:	8e 0f       	add	r24, r30
 7e8:	9f 1f       	adc	r25, r31
 7ea:	08 95       	ret

000007ec <itoa>:
 7ec:	45 32       	cpi	r20, 0x25	; 37
 7ee:	51 05       	cpc	r21, r1
 7f0:	20 f4       	brcc	.+8      	; 0x7fa <itoa+0xe>
 7f2:	42 30       	cpi	r20, 0x02	; 2
 7f4:	10 f0       	brcs	.+4      	; 0x7fa <itoa+0xe>
 7f6:	0c 94 01 04 	jmp	0x802	; 0x802 <__itoa_ncheck>
 7fa:	fb 01       	movw	r30, r22
 7fc:	10 82       	st	Z, r1
 7fe:	cb 01       	movw	r24, r22
 800:	08 95       	ret

00000802 <__itoa_ncheck>:
 802:	bb 27       	eor	r27, r27
 804:	4a 30       	cpi	r20, 0x0A	; 10
 806:	31 f4       	brne	.+12     	; 0x814 <__itoa_ncheck+0x12>
 808:	99 23       	and	r25, r25
 80a:	22 f4       	brpl	.+8      	; 0x814 <__itoa_ncheck+0x12>
 80c:	bd e2       	ldi	r27, 0x2D	; 45
 80e:	90 95       	com	r25
 810:	81 95       	neg	r24
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__utoa_common>

00000818 <__utoa_ncheck>:
 818:	bb 27       	eor	r27, r27

0000081a <__utoa_common>:
 81a:	fb 01       	movw	r30, r22
 81c:	55 27       	eor	r21, r21
 81e:	aa 27       	eor	r26, r26
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	aa 1f       	adc	r26, r26
 826:	a4 17       	cp	r26, r20
 828:	10 f0       	brcs	.+4      	; 0x82e <__utoa_common+0x14>
 82a:	a4 1b       	sub	r26, r20
 82c:	83 95       	inc	r24
 82e:	50 51       	subi	r21, 0x10	; 16
 830:	b9 f7       	brne	.-18     	; 0x820 <__utoa_common+0x6>
 832:	a0 5d       	subi	r26, 0xD0	; 208
 834:	aa 33       	cpi	r26, 0x3A	; 58
 836:	08 f0       	brcs	.+2      	; 0x83a <__utoa_common+0x20>
 838:	a9 5d       	subi	r26, 0xD9	; 217
 83a:	a1 93       	st	Z+, r26
 83c:	00 97       	sbiw	r24, 0x00	; 0
 83e:	79 f7       	brne	.-34     	; 0x81e <__utoa_common+0x4>
 840:	b1 11       	cpse	r27, r1
 842:	b1 93       	st	Z+, r27
 844:	11 92       	st	Z+, r1
 846:	cb 01       	movw	r24, r22
 848:	0c 94 26 04 	jmp	0x84c	; 0x84c <strrev>

0000084c <strrev>:
 84c:	dc 01       	movw	r26, r24
 84e:	fc 01       	movw	r30, r24
 850:	67 2f       	mov	r22, r23
 852:	71 91       	ld	r23, Z+
 854:	77 23       	and	r23, r23
 856:	e1 f7       	brne	.-8      	; 0x850 <strrev+0x4>
 858:	32 97       	sbiw	r30, 0x02	; 2
 85a:	04 c0       	rjmp	.+8      	; 0x864 <strrev+0x18>
 85c:	7c 91       	ld	r23, X
 85e:	6d 93       	st	X+, r22
 860:	70 83       	st	Z, r23
 862:	62 91       	ld	r22, -Z
 864:	ae 17       	cp	r26, r30
 866:	bf 07       	cpc	r27, r31
 868:	c8 f3       	brcs	.-14     	; 0x85c <strrev+0x10>
 86a:	08 95       	ret

0000086c <_exit>:
 86c:	f8 94       	cli

0000086e <__stop_program>:
 86e:	ff cf       	rjmp	.-2      	; 0x86e <__stop_program>
